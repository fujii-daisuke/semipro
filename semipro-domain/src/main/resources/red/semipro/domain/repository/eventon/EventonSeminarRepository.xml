<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="red.semipro.domain.repository.eventon.EventonSeminarRepository">

    <resultMap id="seminarResultMap" type="red.semipro.domain.model.eventon.EventonSeminar">
        <id property="eventId" column="event_id" />
        <result property="title" column="title" />
        <result property="summary" column="summary" />
        <result property="contents" column="contents" />
        <result property="imagePath" column="image_path" />
        <result property="startedAt" column="started_at" />
        <result property="endedAt" column="ended_at" />
        <result property="openedAt" column="opened_at" />
        <result property="entryStartedAt" column="entry_started_at" />
        <result property="entryEndedAt" column="entry_ended_at" />
        <result property="cancelAt" column="cancel_at" />
        <result property="capacity" column="capacity" />
        <result property="eventUrl" column="event_url" />
        <result property="url" column="url" />
        <result property="cancelPolicy" column="cancel_policy" />
        <result property="prefecture.id" column="prefecture_id" />
        <result property="prefecture.name" column="prefecture_name" />
        <result property="address" column="address" />
        <result property="place" column="place" />
        <result property="lat" column="lat" />
        <result property="lng" column="lng" />
        <result property="accepted" column="accepted" />
        <result property="waiting" column="waiting" />
        <result property="embedCode" column="embed_code" />
        <result property="updatedAt" column="updated_at" />
        <collection property="tickets" ofType="red.semipro.domain.model.eventon.EventonSeminarTicket">
            <result column="name" property="name"/>
            <result column="price" property="price"/>
        </collection>
        <collection property="owners" ofType="red.semipro.domain.model.eventon.EventonSeminarOwner">
            <id property="id" column="id" />
            <result property="name" column="name" />
            <result property="url" column="url" />
        </collection>
    </resultMap>

    <sql id="findPageByCriteriaWherePhrase">
        <![CDATA[
        WHERE
            CURRENT_TIMESTAMP < eventon_seminar.entry_ended_at
            and opening_status =  ${@red.semipro.domain.enums.OpeningStatus@OPENING.value}
        ]]>
    </sql>

    <select id="countByCriteria" resultType="_long">
        SELECT
            COUNT(*)
        FROM
            eventon_seminar
    </select>

    <select id="findPageByCriteria" resultMap="seminarResultMap">
        <include refid="baseSelectPhrase" />
        <include refid="baseFromPhrase" />
        <include refid="findPageByCriteriaWherePhrase" />
        ORDER BY
        #{pageable.sort}
        LIMIT
        #{pageable.pageSize}
        OFFSET
        #{pageable.offset}
    </select>

    <select id="findOneByProviderIdAndProviderSeminarId" resultMap="seminarResultMap">
        <include refid="baseSelectPhrase" />
        <include refid="baseFromPhrase" />
        where
        seminar.provider_id = #{providerId}
        and seminar.provider_seminar_id = #{providerSeminarId}
    </select>

    <select id="findOneByOwner" resultMap="seminarResultMap">
        <include refid="baseSelectPhrase" />
        ,
        seminar_owner.id,
        seminar_owner.seminar_id,
        seminar_owner.account_id,
        seminar_owner.provider_owner_id,
        seminar_owner.name,
        seminar_owner.url
        <include refid="baseFromPhrase" />
        inner join seminar_owner on seminar.id = seminar_owner.seminar_id
        where
        seminar_owner.account_id = #{accountId}
        and seminar.id = #{id}
    </select>

    <select id="findAllByOwner" resultMap="seminarResultMap">
        <include refid="baseSelectPhrase" />
        <include refid="baseFromPhrase" />
        inner join seminar_owner on seminar.id = seminar_owner.seminar_id
        where
        seminar_owner.account_id = #{accountId}
        order by
        seminar.created_at desc
    </select>

    <sql id="baseSelectPhrase">
        select
            seminar.id,
            seminar.opening_status,
            seminar.provider_id,
            seminar.provider_seminar_id,
            seminar.seminar_type,
            seminar.title,
            seminar.summary,
            seminar.contents,
            seminar.image_path,
            seminar.starting_at,
            seminar.ending_at,
            seminar.opening_at,
            seminar.entry_starting_at,
            seminar.entry_ending_at,
            seminar.cancel_at,
            seminar.capacity,
            seminar.provider_seminar_url,
            seminar.reference_url,
            seminar.cancel_policy,
            seminar.address,
            seminar.place,
            seminar.lat,
            seminar.lng,
            seminar.accepted,
            seminar.waiting,
            seminar.embed_code,
            seminar.minimum_number_hosts,
            seminar.place_supported,
            seminar.shooting_supported,
            seminar.shooting_edit_supported,
            seminar.movie_sales_supported,
            seminar.updated_at,
            seminar.prefecture_id,
            prefecture.name prefecture_name,
            seminar.city_id,
            city.name city_name,
            seminar_ticket.id ticket_id,
            seminar_ticket.name ticket_name,
            seminar_ticket.price ticket_price,
            seminar_ticket.num ticket_num
    </sql>

    <sql id="baseFromPhrase">
        from seminar
        left outer join seminar_ticket on seminar.id = seminar_ticket.seminar_id
        left outer join prefecture on seminar.prefecture_id = prefecture.id
        left outer join city on prefecture.id = city.prefecture_id and seminar.city_id = city.id
    </sql>

    <select id="findOneWithDetails" resultMap="seminarResultMap">
        <include refid="baseSelectPhrase" />
        <include refid="baseFromPhrase" />
        where
        seminar.id = #{id}
    </select>

    <insert id="insert">
        INSERT INTO eventon_seminar (
        event_id
        title,
        summary,
        contents,
        image_path,
        started_at,
        ended_at,
        opened_at,
        entry_started_at,
        entry_ended_at,
        cancel_at,
        capacity,
        event_url,
        url,
        cancel_policy,
        prefecture_id,
        address,
        place,
        lat,
        lng,
        accepted,
        waiting,
        embed_code,
        created_at,
        updated_at
        )
        VALUES (
        #{eventId},
        #{title},
        #{summary},
        #{contents},
        #{imagePath},
        #{startedAt},
        #{endedAt},
        #{openedAt},
        #{entryStartedAt},
        #{entryEndedAt},
        #{cancelAt},
        #{capacity},
        #{eventUrl},
        #{url},
        #{cancelPolicy},
        #{prefecture.id},
        #{address},
        #{place},
        #{lat},
        #{lng},
        #{accepted},
        #{waiting},
        #{embedCode},
        CURRENT_TIMESTAMP ,
        <if test="updatedAt != null">
            #{updatedAt}
        </if>
        <if test="updatedAt == null">
            CURRENT_TIMESTAMP
        </if>
        )
    </insert>

    <update id="update">
        UPDATE eventon_seminar SET
        title = #{title},
        summary = #{summary},
        contents = #{contents},
        image_path = #{imagePath},
        started_at = #{startingAt},
        ended_at = #{endingAt},
        opened_at = #{openingAt},
        entry_started_at = #{entryStartingAt},
        entry_ended_at = #{entryEndingAt},
        cancel_at = #{cancelAt},
        capacity = #{capacity},
        event_url = #{eventUrl},
        url = #{url},
        cancel_policy = #{cancelPolicy},
        prefecture_id = #{prefecture.id},
        address = #{address},
        place = #{place},
        lat = #{lat},
        lng = #{lng},
        accepted = #{accepted},
        waiting = #{waiting},
        embed_code = #{embedCode},
        <if test="updatedAt != null">
            updated_at = #{updatedAt}
        </if>
        <if test="updatedAt == null">
            updated_at = CURRENT_TIMESTAMP
        </if>
        WHERE
        event_id = #{eventId}
    </update>

</mapper>