<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper
    namespace="red.semipro.domain.repository.seminar.SeminarRepository">

    <resultMap id="seminarResultMap" type="red.semipro.domain.model.Seminar">
        <result property="id" column="id" />
        <result property="providerId" column="provider_id" />
        <result property="providerSeminarId" column="provider_seminar_id" />
        <result property="seminarType" column="seminar_type" />
        <result property="title" column="title" />
        <result property="summary" column="summary" />
        <result property="contents" column="contents" />
        <result property="imagePath" column="image_path" />
        <result property="startingAt" column="starting_at" />
        <result property="endingAt" column="ending_at" />
        <result property="openingAt" column="opening_at" />
        <result property="entryStartingAt" column="entry_starting_at" />
        <result property="entryEndingAt" column="entry_ending_at" />
        <result property="cancelAt" column="cancel_at" />
        <result property="capacity" column="capacity" />
        <result property="providerSeminarUrl" column="provider_seminar_url" />
        <result property="referenceUrl" column="reference_url" />
        <result property="cancelPolicy" column="cancel_policy" />
        <result property="address" column="address" />
        <result property="place" column="place" />
        <result property="lat" column="lat" />
        <result property="lng" column="lng" />
        <result property="accepted" column="accepted" />
        <result property="waiting" column="waiting" />
        <result property="embedCode" column="embed_code" />
        <result property="minimumNumberHosts" column="minimum_number_hosts" />
        <result property="updatedAt" column="updated_at" />
        <result property="prefecture.id" column="prefecture_id" />
        <result property="prefecture.name" column="prefecture_name" />
        <result property="city.id" column="city_id" />
        <result property="city.name" column="city_name" />
        <result property="placeSupported" column="place_supported" />
        <result property="shootingSupported" column="shooting_supported" />
        <result property="shootingEditSupported" column="shooting_edit_supported" />
        <result property="movieSalesSupported" column="movie_sales_supported" />
    </resultMap>

    <sql id="findPageByCriteriaWherePhrase">
        <![CDATA[
        where
            seminar.ending_at >= current_timestamp
            and opening_status =  ${@red.semipro.domain.enums.OpeningStatus@OPENING.value}
        ]]>
    </sql>

    <select id="countByCriteria" resultType="_long">
        SELECT
            COUNT(*)
        FROM
            seminar
        <include refid="findPageByCriteriaWherePhrase" />
    </select>

    <select id="findPageByCriteria" resultMap="seminarResultMap">
        <include refid="baseSelectPhrase" />
        <include refid="baseFromPhrase" />
        <include refid="findPageByCriteriaWherePhrase" />
        ORDER BY
            #{pageable.sort}
        LIMIT
            #{pageable.pageSize}
        OFFSET
            #{pageable.offset}
    </select>

    <select id="findOneByProviderIdAndProviderSeminarId" resultMap="seminarResultMap">
        <include refid="baseSelectPhrase" />
        <include refid="baseFromPhrase" />
        where
            seminar.provider_id = #{providerId}
            and seminar.provider_seminar_id = #{providerSeminarId}
    </select>

    <sql id="baseSelectPhrase">
        select
            seminar.id,
            seminar.provider_id,
            seminar.provider_seminar_id,
            seminar.seminar_type,
            seminar.title,
            seminar.summary,
            seminar.contents,
            seminar.image_path,
            seminar.starting_at,
            seminar.ending_at,
            seminar.opening_at,
            seminar.entry_starting_at,
            seminar.entry_ending_at,
            seminar.cancel_at,
            seminar.capacity,
            seminar.provider_seminar_url,
            seminar.reference_url,
            seminar.cancel_policy,
            seminar.address,
            seminar.place,
            seminar.lat,
            seminar.lng,
            seminar.accepted,
            seminar.waiting,
            seminar.embed_code,
            seminar.minimum_number_hosts,
            seminar.place_supported,
            seminar.shooting_supported,
            seminar.shooting_edit_supported,
            seminar.movie_sales_supported,
            seminar.updated_at,
            seminar.prefecture_id,
            prefecture.name prefecture_name,
            seminar.city_id,
            city.name city_name
    </sql>

    <sql id="baseFromPhrase">
        from seminar
        left outer join prefecture on seminar.prefecture_id = prefecture.id
        left outer join city on prefecture.id = city.prefecture_id and seminar.city_id = city.id
    </sql>
    
    <select id="findOneWithDetails" resultMap="seminarResultMap">
        <include refid="baseSelectPhrase" />
        <include refid="baseFromPhrase" />
        where
            seminar.id = #{id}
    </select>
    
    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
        insert into seminar (
            opening_status,
            provider_id,
            provider_seminar_id,
            seminar_type,
            title,
            summary,
            contents,
            image_path,
            starting_at,
            ending_at,
            opening_at,
            entry_starting_at,
            entry_ending_at,
            cancel_at,
            capacity,
            provider_seminar_url,
            reference_url,
            cancel_policy,
            prefecture_id,
            city_id,
            address,
            place,
            lat,
            lng,
            accepted,
            waiting,
            embed_code,
            minimum_number_hosts,
            place_supported,
            shooting_supported,
            shooting_edit_supported,
            movie_sales_supported,
            created_at,
            updated_at
            )
        values (
            #{openingStatus.value}
            #{providerId.value},
            #{providerSeminarId},
            #{seminarType},
            #{title},
            #{summary},
            #{contents},
            #{imagePath},
            #{startingAt},
            #{endingAt},
            #{openingAt},
            #{entryStartingAt},
            #{entryEndingAt},
            #{cancelAt},
            #{capacity},
            #{providerSeminarUrl},
            #{referenceUrl},
            #{cancelPolicy},
            #{prefecture.id},
            #{city.id},
            #{address},
            #{place},
            #{lat},
            #{lng},
            #{accepted},
            #{waiting},
            #{embedCode},
            #{minimumNumberHosts},
            #{placeSupported},
            #{shootingSupported},
            #{shootingEditSupported},
            #{movieSalesSupported},
            current_timestamp,
            <if test="updatedAt != null">
                #{updatedAt}
            </if>
            <if test="updatedAt == null">
                current_timestamp
            </if>
            )
    </insert>
    
    <update id="update">
        update seminar set
            seminar_type = #{seminarType},
            title = #{title},
            summary = #{summary},
            contents = #{contents},
            image_path = #{imagePath},
            starting_at = #{startingAt},
            ending_at = #{endingAt},
            opening_at = #{openingAt},
            entry_starting_at = #{entryStartingAt},
            entry_ending_at = #{entryEndingAt},
            cancel_at = #{cancelAt},
            capacity = #{capacity},
            provider_seminar_url = #{providerSeminarUrl},
            reference_url = #{referenceUrl},
            cancel_policy = #{cancelPolicy},
            prefecture_id = #{prefecture.id},
            city_id = #{city.id}
            address = #{address},
            place = #{place},
            lat = #{lat},
            lng = #{lng},
            accepted = #{accepted},
            waiting = #{waiting},
            embed_code = #{embedCode},
            minimum_number_hosts = #{minimumNumberHosts},
            place_supported = #{placeSupported},
            shooting_supported = #{shootingSupported},
            shooting_edit_supported = #{shootingEditSupported},
            movie_sales_supported = #{movieSalesSupported},
            <if test="updatedAt != null">
                updated_at = #{updatedAt}
            </if>
            <if test="updatedAt == null">
                updated_at = current_timestamp
            </if>
        where
            id = #{id}
    </update>
    
    <select id="findOneByOwner" resultMap="seminarResultMap">
        <include refid="baseSelectPhrase" />
        <include refid="baseFromPhrase" />
        inner join seminar_owner on seminar.id = seminar_owner.seminar_id
        where
            seminar_owner.member_id = #{memberId}
            and seminar.id = #{id}
    </select>

    <select id="findAllByOwner" resultMap="seminarResultMap">
        <include refid="baseSelectPhrase" />
        <include refid="baseFromPhrase" />
        inner join seminar_owner on seminar.id = seminar_owner.seminar_id
        where
            seminar_owner.member_id = #{memberId}
        order by
            seminar.created_at desc
    </select>
    
</mapper>