<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper
    namespace="red.semipro.domain.repository.member.MemberRepository">

    <resultMap id="member" type="red.semipro.domain.model.Member">
        <result property="id" column="id" />
        <result property="email" column="email" />
        <result property="password" column="password" />
        <result property="username" column="username" />
        <result property="registerStatus" column="register_status" />
    </resultMap>

    <select id="findOne" resultMap="member">
        select
            id,
            email,
            password,
            username,
            register_status
        from member
        where
            id = #{id}
    </select>
    
    <select id="findByUsername" resultMap="member">
        select
            id,
            email,
            password,
            username,
            register_status
        from member
        where
            username = #{username}
    </select>

    <select id="findByEmail" resultMap="member">
        select
            id,
            email,
            password,
            username,
            register_status
        from member
        where
            email = #{email}
            and register_status = ${@red.semipro.domain.enums.RegisterStatus@REGULAR.value}
    </select>

    <select id="isExists" resultType="boolean">
        select
            count(*) > 0
        from member
        where
            id != #{id}
            and (email = #{email} or username = #{username})
            and register_status = ${@red.semipro.domain.enums.RegisterStatus@REGULAR.value}
    </select>
    
    <select id="isExistsEmail" resultType="boolean">
        select
            count(*) > 0
        from member
        where
            email = #{email}
            and register_status = 2
    </select>
    
    <select id="isExistsUsername" resultType="boolean">
        select
            count(*) > 0
        from member
        where
            username = #{username}
            and register_status = ${@red.semipro.domain.enums.RegisterStatus@REGULAR.value}
    </select>
    
    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
        insert into member (
            email,
            password,
            username,
            register_status
            )
        values (
            #{email},
            #{password},
            #{username},
            #{registerStatus.value}
        )
    </insert>
    
    <insert id="activation">
        update member set
            register_status = ${@red.semipro.domain.enums.RegisterStatus@REGULAR.value},
            updated_at = current_timestamp
        where
            id = #{id}
    </insert>

</mapper>